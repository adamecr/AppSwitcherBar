<appBar:AppBarWindow
    x:Class="net.adamec.ui.AppSwitcherBar.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:appBar="clr-namespace:net.adamec.ui.AppSwitcherBar.AppBar"
    xmlns:viewModel="clr-namespace:net.adamec.ui.AppSwitcherBar.ViewModel"
    xmlns:wpf="clr-namespace:net.adamec.ui.AppSwitcherBar.Wpf"
    xmlns:dto="clr-namespace:net.adamec.ui.AppSwitcherBar.Dto"
    mc:Ignorable="d"
    x:Name="Root"
    Title="MainWindow"
    Icon="/AppSwitcherBar.ico" >
    <appBar:AppBarWindow.Resources>
        <viewModel:ViewModelLocator x:Key="ViewModelLocator" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </appBar:AppBarWindow.Resources>
    <appBar:AppBarWindow.DataContext>
        <Binding Source="{StaticResource ViewModelLocator}" Path="MainViewModel" />
    </appBar:AppBarWindow.DataContext>

    <DockPanel >
        <DockPanel.Style>
            <Style TargetType="{x:Type DockPanel}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=BackgroundDataRetrieved}" Value="True">
                        <Setter Property="Cursor" Value="Arrow"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=BackgroundDataRetrieved}" Value="False">
                        <Setter Property="Cursor" Value="ArrowCD"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </DockPanel.Style>
        <Thumb Background="Gray" DragCompleted="ResizeDragCompleted" DragDelta="ResizeDragDelta" DragStarted="ResizeDragStarted" appBar:AppBarWindow.BarAutoSize="Add">
            <Thumb.Style>
                <Style TargetType="{x:Type Thumb}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Left">
                            <Setter Property="Width" Value="5" />
                            <Setter Property="DockPanel.Dock" Value="Right" />
                            <Setter Property="Cursor" Value="SizeWE" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Right">
                            <Setter Property="Width" Value="5" />
                            <Setter Property="DockPanel.Dock" Value="Left" />
                            <Setter Property="Cursor" Value="SizeWE" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Top">
                            <Setter Property="Height" Value="5" />
                            <Setter Property="DockPanel.Dock" Value="Bottom" />
                            <Setter Property="Cursor" Value="SizeNS" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Bottom">
                            <Setter Property="Height" Value="5" />
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Cursor" Value="SizeNS" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Thumb.Style>
        </Thumb>

        <StackPanel Margin="3">
            <StackPanel.Style>
                <Style TargetType="{x:Type StackPanel}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Left">
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="DockPanel.Dock" Value="Top" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Right">
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="DockPanel.Dock" Value="Top" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Top">
                            <Setter Property="Orientation" Value="Vertical" />
                            <Setter Property="DockPanel.Dock" Value="Left" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Bottom">
                            <Setter Property="Orientation" Value="Vertical" />
                            <Setter Property="DockPanel.Dock" Value="Left" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>
            <Button Click="Close" Content="{iconPacks:BootstrapIcons Kind=X, Width=13, Height=13 }" Margin="1" Width="18" Height="18"/>
            <ToggleButton Content="{iconPacks:BootstrapIcons Kind=Gear, Width=13, Height=13}" x:Name="SettingToggle" Margin="1" Width="18" Height="18" />
        </StackPanel>

        <WrapPanel Margin="3"  >
            <WrapPanel.Style>
                <Style TargetType="{x:Type WrapPanel}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Left">
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="DockPanel.Dock" Value="Top" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Right">
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="DockPanel.Dock" Value="Top" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Top">
                            <Setter Property="Orientation" Value="Vertical" />
                            <Setter Property="DockPanel.Dock" Value="Left" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Bottom">
                            <Setter Property="Orientation" Value="Vertical" />
                            <Setter Property="DockPanel.Dock" Value="Left" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsChecked, ElementName=SettingToggle}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsChecked, ElementName=SettingToggle}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </WrapPanel.Style>
            <StackPanel Orientation="Horizontal" Margin="1" >
                <iconPacks:PackIconBootstrapIcons Kind="LayoutSidebarInset" Margin="1" VerticalAlignment="Center" />
                <ComboBox ItemsSource="{Binding Edges}" SelectedItem="{Binding Path=DockMode, ElementName=Root, Mode=TwoWay}" Margin="1" VerticalAlignment="Center" Width="120"  />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="1" >
                <iconPacks:PackIconBootstrapIcons Kind="Display" Margin="1" VerticalAlignment="Center" />
                <ComboBox ItemsSource="{Binding AllMonitors}" SelectedItem="{Binding Path=Monitor, ElementName=Root, Mode=TwoWay}" Margin="1" VerticalAlignment="Center" Width="120"  />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="1" >
                <iconPacks:PackIconBootstrapIcons Kind="CardList" Margin="1" VerticalAlignment="Center" />
                <Button Content="Refresh" Command="{Binding RefreshWindowCollectionCommand}"  CommandParameter="true" Margin="1" Width="120"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="1" >
                <CheckBox  Content="Run on Win start" Margin="1" VerticalAlignment="Center" Width="120"
                           Command="{Binding ToggleRunOnStartupCommand}"
                           IsChecked="{Binding RunOnWinStartupSet}"
                           Visibility="{Binding RunOnWinStartupAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                           />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="1" >
                <CheckBox  Content="Auto size" Margin="1" VerticalAlignment="Center" Width="120"
                           IsChecked="{Binding Path=IsAutoSized, ElementName=Root, Mode=TwoWay}"/>
            </StackPanel>

        </WrapPanel>

        <WrapPanel>
            <WrapPanel.Style>
                <Style TargetType="{x:Type WrapPanel}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Left">
                            <Setter Property="Orientation" Value="Vertical" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Right">
                            <Setter Property="Orientation" Value="Vertical" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Top">
                            <Setter Property="Orientation" Value="Horizontal" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Bottom">
                            <Setter Property="Orientation" Value="Horizontal" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </WrapPanel.Style>

            <ItemsControl Margin="5" ItemsSource="{Binding ButtonManager}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <appBar:AppButtonsPanel
                            ButtonHeight="{Binding Path=Settings.AppBarButtonHeight, ElementName=Root}"
                            ButtonMaxWidth="{Binding Path=Settings.AppBarButtonWidth, ElementName=Root}"
                            ButtonMinWidthRatio="0.7"
                            ButtonMargin="{Binding Path=Settings.AppBarButtonMargin, ElementName=Root}"
                            IsAutoSized="{Binding Path=IsAutoSized, ElementName=Root}"
                            AllowButtonReorder="{Binding Path=Settings.AllowAppBarButtonReorder, ElementName=Root}"
                            appBar:AppBarWindow.BarAutoSize="Measure" >
                            <appBar:AppButtonsPanel.Style>
                                <Style TargetType="{x:Type appBar:AppButtonsPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Left">
                                            <Setter Property="Orientation" Value="Vertical" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Right">
                                            <Setter Property="Orientation" Value="Vertical" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Top">
                                            <Setter Property="Orientation" Value="Horizontal" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=DockMode, ElementName=Root}" Value="Bottom">
                                            <Setter Property="Orientation" Value="Horizontal" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </appBar:AppButtonsPanel.Style>
                        </appBar:AppButtonsPanel>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate  >
                        <wpf:AppButton Margin="{Binding Settings.AppBarButtonMargin, ElementName=Root}"
                                             ButtonInfo="{Binding}"
                                             BuildContextMenuCommand="{Binding DataContext.BuildContextMenuCommand, ElementName=Root}"
                                             ToolTip="{Binding Path=Title}"
                                             VerticalContentAlignment="Center" HorizontalContentAlignment="Left">
                            <wpf:AppButton.Style>
                                <Style TargetType="{x:Type wpf:AppButton}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Type}" Value="{x:Type dto:WndInfo}">
                                            <Setter Property="Command" Value="{Binding DataContext.ToggleApplicationWindowCommand, ElementName=Root}" />
                                            <Setter Property="CommandParameter" Value="{Binding Path=Self.(dto:WndInfo.Hwnd)}"></Setter>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=Type}" Value="{x:Type dto:WndInfo}" />
                                                <Condition Binding="{Binding Path=Self.(dto:WndInfo.IsForeground)}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="FontWeight" Value="Bold" />
                                            <Setter Property="BorderThickness" Value="2" />
                                            <Setter Property="Background" Value="Navy" />
                                            <Setter Property="Foreground" Value="White" />
                                        </MultiDataTrigger>
                                        
                                        <DataTrigger Binding="{Binding Path=Type}" Value="{x:Type dto:PinnedAppInfo}">
                                            <Setter Property="Command" Value="{Binding DataContext.LaunchPinnedAppCommand, ElementName=Root}" />
                                            <Setter Property="CommandParameter" Value="{Binding Path=.}"></Setter>
                                            <Setter Property="Background" Value="WhiteSmoke" />
                                            <Setter Property="FontStyle" Value="Italic"/>
                                        </DataTrigger>
                                        <Trigger Property="IsDragAndDropSource" Value="True">
                                            <Setter Property="Background" Value="#FFB8E4FE" />
                                        </Trigger>
                                        <Trigger Property="IsDragAndDropTarget" Value="True">
                                            <Setter Property="Background" Value="DarkGray" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </wpf:AppButton.Style>
                            <wpf:AppButton.ContextMenu>
                                <ContextMenu>
                                    <MenuItem>Initial menu; this will be replaced ...</MenuItem>
                                </ContextMenu>
                            </wpf:AppButton.ContextMenu>
                            <Grid Margin="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="30" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Image Grid.Column="0" Source="{Binding Path=BitmapSource}" Width="16" Height="16" Stretch="Fill"  Margin="0,0,5,0" />
                                <TextBlock Grid.Column="1" Text="{Binding Path=Title}" TextTrimming="CharacterEllipsis"/>
                                <wpf:ThumbnailPopup 
                                    HorizontalOffset="0"
                                    VerticalOffset="-1"
                                    AllowsTransparency="True"
                                    Width="{Binding Path=Settings.AppBarThumbnailWidth ,ElementName=Root}"
                                    Height="{Binding Path=Settings.AppBarThumbnailHeight ,ElementName=Root}"
                                    PlacementTarget="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type wpf:AppButton}}}">
                                    <Border BorderThickness="1" BorderBrush="Gainsboro" Background="WhiteSmoke" CornerRadius="5" />
                                    <wpf:ThumbnailPopup.Style>
                                        <Style TargetType="wpf:ThumbnailPopup">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Type}" Value="{x:Type dto:WndInfo}">
                                                    <Setter Property="SourceHwnd" Value="{Binding Path=Self.(dto:WndInfo.Hwnd)}" />
                                                    <Setter Property="IsOpen" Value="{Binding CanShowThumbnail, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type wpf:AppButton}}}"/>
                                                    <Setter Property="ThumbnailShowCommand" Value="{Binding Path=DataContext.ShowThumbnailCommand, ElementName=Root}" />
                                                    <Setter Property="ThumbnailHideCommand" Value="{Binding Path=DataContext.HideThumbnailCommand, ElementName=Root}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=Type}" Value="{x:Type dto:PinnedAppInfo}">
                                                    <Setter Property="IsOpen" Value="False" />
                                                    <Setter Property="IsEnabled" Value="False" />
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </wpf:ThumbnailPopup.Style>
                                </wpf:ThumbnailPopup>
                            </Grid>
                        </wpf:AppButton>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </WrapPanel>
    </DockPanel>
</appBar:AppBarWindow>
